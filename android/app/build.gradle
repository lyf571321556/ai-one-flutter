def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    configurations {
        all*.exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "ai.ones.ones_ai_flutter"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    signingConfigs {
        debug {
            storeFile file("key/ones_test.jks")
            storePassword '123456'
            keyAlias 'ones'
            keyPassword '123456'
            v2SigningEnabled false

            ext.betaDistributionReleaseNotesFilePath = ""
            ext.betaDistributionGroupAliases = "ones.ai"
            ext.betaDistributionNotifications = true
        }

        release {
            storeFile file("key/ones_test.jks")
            storePassword '123456'
            keyAlias 'ones'
            keyPassword '123456'
//            storeFile file(signingStoreFile)
//            storePassword signingStorePassword
//            keyAlias signingKeyAlias
//            keyPassword signingKeyPassword
            v2SigningEnabled false
        }
    }
    flavorDimensions "channel"

    productFlavors {
        dev {
            dimension "channel"
            applicationIdSuffix ".dev"
            versionCode 1
            versionName "1.0"
        }

        preview {
            dimension "channel"
            applicationIdSuffix ".preview"
            versionCode 1
            versionName "1.0"
        }

        production {
            dimension "channel"
            versionCode 1
            versionName "1.0"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
