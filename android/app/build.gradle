def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    print "compileSdkVersion-${flutter.compileSdkVersion}"
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        print "VERSION_1_8-${JavaVersion.VERSION_1_8}"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.ai_one_flutter"
        print "minSdkVersion-${flutter.minSdkVersion}"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 30
        print "targetSdkVersion-${flutter.targetSdkVersion}"
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }


    signingConfigs {
        debug {
            storeFile file("key/ones_test.jks")
            storePassword '123456'
            keyAlias 'ones'
            keyPassword '123456'
            v1SigningEnabled true
            v2SigningEnabled true

            ext.betaDistributionReleaseNotesFilePath = ""
            ext.betaDistributionGroupAliases = "ones.ai"
            ext.betaDistributionNotifications = true
        }

        release {
            storeFile file("key/ones_test.jks")
            storePassword '123456'
            keyAlias 'ones'
            keyPassword '123456'
//            storeFile file(signingStoreFile)
//            storePassword signingStorePassword
//            keyAlias signingKeyAlias
//            keyPassword signingKeyPassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            shrinkResources false
            zipAlignEnabled false
            minifyEnabled false

            manifestPlaceholders = [
                    leanCloudPushName: "ai.ones.android.ones.sandbox.push",
            ]

            buildConfigField 'String', 'typeOfDeployment', "\"cloud\""
            buildConfigField "String", "defaultServerUrl", "\"https://appdev.myones.net/api/project\""
            buildConfigField "String", "defaultWikiServerUrl", "\"https://appdev.myones.net/wiki\""
            buildConfigField "boolean", "useDebugEnv", "true"
            buildConfigField 'String', 'appId', "\"00000000-0000-0000-0000-000000000000\""
            buildConfigField "String", "deviceProfile", "\"ones_project_dev\""

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        profile {
            debuggable false
            crunchPngs true
            shrinkResources true
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "channel"

    productFlavors {
        dev {
            dimension "channel"
            applicationIdSuffix ".dev"
            buildConfigField 'String', 'paramKey', "\"paramValue\""
            manifestPlaceholders = [
                    manifestParamKey: "manifestParamValue",
            ]
        }

        preview {
            dimension "channel"
            applicationIdSuffix ".preview"
            buildConfigField 'String', 'paramKey', "\"paramValue\""
            manifestPlaceholders = [
                    manifestParamKey: "manifestParamValue",
            ]
        }

        production {
            dimension "channel"
            buildConfigField 'String', 'paramKey', "\"paramValue\""
            manifestPlaceholders = [
                    manifestParamKey: "manifestParamValue",
            ]
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
